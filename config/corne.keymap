/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DVORAK 0
#define QWERTY 1
#define LOWER  2
#define RAISE  3
#define ADJUST 4

#define COMBO_MS 50
#define COMBO_LONG 200

/ {
    combos {
        compatible = "zmk,combos";
        
        // COMBOS LIST
        // combo_esc (0_1.ESC)<0,1>   : PRESS ESC ON TAB+;/Q
        // combo_del (10_11.DEL)<0,1> : PRESS DEL ON L/P+BKSP
        // combo_caps (0_35.CAPS)<0,1> : PRESS CAPS ON RSHIFT+TAB
        // qwrt_tog (24_35_39,=>1)<0> : TOGGLES LAYOUT ON LSHFT+RSHFT+ENT
        // dvrk_tog (24_35_39.=>0)<1> : TOGGLES LAYOUT ON LSHFT+RSHFT+ENT
        // |  0  |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  10 |  11 |
        // |  12 |  13 |  14 |  15 |  16 |  17 |     |  18 |  19 |  20 |  21 |  22 |  23 |
        // |  24 |  25 |  26 |  27 |  28 |  29 |     |  30 |  31 |  32 |  33 |  34 |  35 |
        //                   |  36 |  37 |  38 |     |  39 |  40 |  41 |
        combo_esc {
            timeout-ms = <COMBO_MS>;
            key-positions = <0 1>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_del {
            timeout-ms = <COMBO_MS>;
            key-positions = <10 11>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };
        
        combo_caps {
            timeout-ms = <COMBO_LONG>;
            key-positions = <0 35>;
            layers = <0 1>;
            bindings = <&kp CAPS>;
        };
        
        qwrt_tog {
            timeout-ms = <COMBO_LONG>;
            key-positions = <24 35 39>;
            layers = <0>;
            bindings = <&to 1>;
        };
        
        dvrk_tog {
            timeout-ms = <COMBO_LONG>;
            key-positions = <24 35 39>;
            layers = <1>;
            bindings = <&to 0>;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer_mo {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
    
    behaviors {
        n9com: nine_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "NINE_COMMA";
            #binding-cells = <28>;
            bindings = <&kp N9>, <&kp COMMA>;
            mods = <(MOD_RSFT)>;
        };
        
        n0dot: zero_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_DOT";
            #binding-cells = <29>;
            bindings = <&kp N0>, <&kp DOT>;
            mods = <(MOD_RSFT)>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";
        
        dvorak_layer {
            // 0 DVORAK
            //                     |TAB  | ' " | , < | . > |  P  |  Y  |     |  F  |  G  |  C  |  R  |  L  |BKSP |
            //                     |CTRL |  A  |  O  |  E  |  U  |  I  |     |  D  |  H  |  T  |  N  |  S  | - _ |
            //                     |SHFT | ; : |  Q  |  J  |  K  |  X  |     |  B  |  M  |  W  |  V  |  Z  |SHFT |
            //                                       | ALT | <2> | SPC |     | ENT | <3> | GUI |
            label = "DVORAK";
            bindings = <
           &kp TAB    &kp SQT  &kp COMMA   &kp DOT      &kp P      &kp Y     &kp F      &kp G      &kp C     &kp R  &kp L  &kp BSPC
         &kp LCTRL      &kp A      &kp O     &kp E      &kp U      &kp I     &kp D      &kp H      &kp T     &kp N  &kp S  &kp MINUS
         &kp LSHFT   &kp SEMI      &kp Q     &kp J      &kp K      &kp X     &kp B      &kp M      &kp W     &kp V  &kp Z  &kp RSHFT
                                          &kp LALT  &mo LOWER  &kp SPACE     &kp ENTER  &mo RAISE  &kp RGUI
            >;
        };
        
        qwerty_layer {
            // 1 QWERTY
            //                     |TAB  |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |BKSP |
            //                     |CTRL |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  | ; : | ' " |
            //                     |SHFT |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  | , < | . > | / ? |SHFT |
            //                                       | ALT | <2> | SPC |     | ENT | <3> | GUI |
            label = "QWERTY";
            bindings = <
                   &kp TAB  &kp Q  &kp W     &kp E      &kp R      &kp T     &kp Y      &kp U      &kp I      &kp O    &kp P     &kp BSPC
                 &kp LCTRL  &kp A  &kp S     &kp D      &kp F      &kp G     &kp H      &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
                 &kp LSHFT  &kp Z  &kp X     &kp C      &kp V      &kp B     &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                          &kp LALT  &mo LOWER  &kp SPACE     &kp ENTER  &mo RAISE  &kp RGUI
            >;
        };
        
        lower_layer {
            // 2 LOWER : NUMS + SYMBOLS
            //               |GRAVE|  !  |  @  |  #  |   $    |   %    |     |  ^  |  &  |  *  |  (  |  )  | "|" |
            //               |     |  1  |  2  |  3  |   4    |   5    |     |  -  |  =  |  /  |  [  |  ]  |  \  |
            //               |     |  6  |  7  |  8  |9:RSFT>,|0:RSFT>.|     |  _  |  +  |  ?  |  {  |  }  |     |
            //                                 |     |========|        |     |     |     |     |
            label = "NUM";
            bindings = <
              &kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp PIPE
                 &trans    &kp N1  &kp N2    &kp N3    &kp N4     &kp N5     &kp MINUS  &kp EQUAL  &kp FSLH   &kp LBKT  &kp RBKT  &kp BSLH
                 &trans    &kp N6  &kp N7    &kp N8    &n9com     &n0dot     &kp UNDER  &kp PLUS   &kp QMARK  &kp LBRC  &kp RBRC  &trans
                                             &trans    &trans     &trans     &trans     &trans     &trans
            >;
        };
        
        raise_layer {
            // 3 RAISE : FN + NAV
            //                     |ESC  | F1  | F2  | F3  | F4  | F5  |     |HOME |PGDN |PGUP |END  |PRNS |DEL  |
            //                     |     | F6  | F7  | F8  | F9  | F10 |     |LEFT |DOWN | UP  |RIGHT|     |INS  |
            //                     |     | F11 | F12 |     |     |     |     |     |     |     |     |     |     |
            //                                             |     |     |     |     |=====|     |
            label = "NAV";
            bindings = <
                      &kp ESC  &kp F1   &kp F2   &kp F3  &kp F4   &kp F5     &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp PSCRN  &kp DEL
                       &trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10     &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans     &kp INS
                       &trans  &trans  &kp F11  &kp F12  &trans   &trans     &trans    &trans     &trans     &trans     &trans     &trans
                                                 &trans  &trans   &trans     &trans    &trans     &trans
            >;
        };
        
        adjust_layer {
            // 4 ADJUST : BT + MEDIA
            //                     |     |     |     |     |     |     |     |MUTE | V-  | V+  |     |     |CALC |
            //                     |BTCLR|BT1  |BT2  |BT3  |BT4  |BT5  |     |PRV  | PP  |NXT  |     |     |FILES|
            //                     |     |     |     |     |     |     |     |     |     |     |     |     |     |
            //                                       |     |=====|     |     |     |=====|     |
            label = "BT";
            bindings = <
            &trans        &trans        &trans        &trans        &trans        &trans     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans  &trans  &kp C_AL_CALC
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &kp C_PREV  &kp C_PP      &kp C_NEXT    &trans  &trans  &kp C_AL_MY_COMPUTER
            &trans        &trans        &trans        &trans        &trans        &trans     &trans      &trans        &trans        &trans  &trans  &trans
                                                      &trans        &trans        &trans     &trans      &trans        &trans
            >;
        };
    };
};
